/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  DummyContract,
  DummyContractInterface,
} from "../../ForwardTester.sol/DummyContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_wormholeRelayer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "chainId",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "targetAddress",
        type: "address",
      },
      {
        internalType: "Gas",
        name: "gasLimit",
        type: "uint256",
      },
      {
        internalType: "TargetNative",
        name: "receiverValue",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "forward",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102fe3803806102fe83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61026b806100936000396000f3fe60806040526004361061001e5760003560e01c8063c9f594f814610023575b600080fd5b6100366100313660046100c1565b610038565b005b600054604051634533e5ff60e01b81526001600160a01b0390911690634533e5ff9034906100729089908990879089908b906004016101be565b6000604051808303818588803b15801561008b57600080fd5b505af115801561009f573d6000803e3d6000fd5b50505050505050505050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a086880312156100d957600080fd5b853561ffff811681146100eb57600080fd5b945060208601356001600160a01b038116811461010757600080fd5b93506040860135925060608601359150608086013567ffffffffffffffff8082111561013257600080fd5b818801915088601f83011261014657600080fd5b813581811115610158576101586100ab565b604051601f8201601f19908116603f01168101908382118183101715610180576101806100ab565b816040528281528b602084870101111561019957600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b61ffff861681526000602060018060a01b0387168184015260a0604084015285518060a085015260005b818110156102045787810183015185820160c0015282016101e8565b50600060c0828601015260c0601f19601f83011685010192505050836060830152826080830152969550505050505056fea264697066735822122007067252be2a414747779a03d034347df960fffe9fd6ec303aa4830d6eb88a5d64736f6c63430008130033";

type DummyContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DummyContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DummyContract__factory extends ContractFactory {
  constructor(...args: DummyContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _wormholeRelayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DummyContract> {
    return super.deploy(
      _wormholeRelayer,
      overrides || {}
    ) as Promise<DummyContract>;
  }
  override getDeployTransaction(
    _wormholeRelayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_wormholeRelayer, overrides || {});
  }
  override attach(address: string): DummyContract {
    return super.attach(address) as DummyContract;
  }
  override connect(signer: Signer): DummyContract__factory {
    return super.connect(signer) as DummyContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyContractInterface {
    return new utils.Interface(_abi) as DummyContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DummyContract {
    return new Contract(address, _abi, signerOrProvider) as DummyContract;
  }
}
