/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  FakeWormholeSimulator,
  FakeWormholeSimulatorInterface,
} from "../../WormholeSimulator.sol/FakeWormholeSimulator";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract MockWormhole",
        name: "initWormhole",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "version",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "timestamp",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "nonce",
            type: "uint32",
          },
          {
            internalType: "uint16",
            name: "emitterChainId",
            type: "uint16",
          },
          {
            internalType: "bytes32",
            name: "emitterAddress",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sequence",
            type: "uint64",
          },
          {
            internalType: "uint8",
            name: "consistencyLevel",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "payload",
            type: "bytes",
          },
          {
            internalType: "uint32",
            name: "guardianSetIndex",
            type: "uint32",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "guardianIndex",
                type: "uint8",
              },
            ],
            internalType: "struct IWormhole.Signature[]",
            name: "signatures",
            type: "tuple[]",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        internalType: "struct IWormhole.VM",
        name: "vm_",
        type: "tuple",
      },
    ],
    name: "encodeAndSignMessage",
    outputs: [
      {
        internalType: "bytes",
        name: "signedMessage",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "version",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "timestamp",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "nonce",
            type: "uint32",
          },
          {
            internalType: "uint16",
            name: "emitterChainId",
            type: "uint16",
          },
          {
            internalType: "bytes32",
            name: "emitterAddress",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sequence",
            type: "uint64",
          },
          {
            internalType: "uint8",
            name: "consistencyLevel",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "payload",
            type: "bytes",
          },
          {
            internalType: "uint32",
            name: "guardianSetIndex",
            type: "uint32",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "guardianIndex",
                type: "uint8",
              },
            ],
            internalType: "struct IWormhole.Signature[]",
            name: "signatures",
            type: "tuple[]",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        internalType: "struct IWormhole.VM",
        name: "vm_",
        type: "tuple",
      },
    ],
    name: "encodeObservation",
    outputs: [
      {
        internalType: "bytes",
        name: "encodedObservation",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "topics",
            type: "bytes32[]",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Vm.Log[]",
        name: "logs",
        type: "tuple[]",
      },
      {
        internalType: "uint32",
        name: "nonce",
        type: "uint32",
      },
      {
        internalType: "uint16",
        name: "emitterChainId",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "emitterAddress",
        type: "address",
      },
    ],
    name: "fetchSignedBatchVAAFromLogs",
    outputs: [
      {
        internalType: "bytes",
        name: "signedMessage",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "topics",
            type: "bytes32[]",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Vm.Log",
        name: "log",
        type: "tuple",
      },
      {
        internalType: "uint16",
        name: "emitterChainId",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "emitterAddress",
        type: "address",
      },
    ],
    name: "fetchSignedMessageFromLogs",
    outputs: [
      {
        internalType: "bytes",
        name: "signedMessage",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "topics",
            type: "bytes32[]",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Vm.Log[]",
        name: "logs",
        type: "tuple[]",
      },
    ],
    name: "fetchWormholeMessageFromLog",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "topics",
            type: "bytes32[]",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Vm.Log[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "invalidateVM",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "topics",
            type: "bytes32[]",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Vm.Log",
        name: "log",
        type: "tuple",
      },
    ],
    name: "parseVMFromLogs",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "version",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "timestamp",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "nonce",
            type: "uint32",
          },
          {
            internalType: "uint16",
            name: "emitterChainId",
            type: "uint16",
          },
          {
            internalType: "bytes32",
            name: "emitterAddress",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sequence",
            type: "uint64",
          },
          {
            internalType: "uint8",
            name: "consistencyLevel",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "payload",
            type: "bytes",
          },
          {
            internalType: "uint32",
            name: "guardianSetIndex",
            type: "uint32",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "guardianIndex",
                type: "uint8",
              },
            ],
            internalType: "struct IWormhole.Signature[]",
            name: "signatures",
            type: "tuple[]",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        internalType: "struct IWormhole.VM",
        name: "vm_",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newFee",
        type: "uint256",
      },
    ],
    name: "setMessageFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "wormhole",
    outputs: [
      {
        internalType: "contract MockWormhole",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051611ac8380380611ac883398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611a35806100936000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806364bb9bfb1161006657806364bb9bfb146100fc57806384acd1bb1461010f578063920539af1461013a5780639404495d1461014d578063fb41833e1461016d57600080fd5b80630e645295146100985780631e5a2802146100c157806323aa2a9d146100d65780634603c12a146100e9575b600080fd5b6100ab6100a636600461109a565b61018d565b6040516100b8919061120e565b60405180910390f35b6100d46100cf366004611228565b610251565b005b6100d46100e4366004611264565b6102b6565b6100ab6100f7366004611358565b6102e7565b6100ab61010a36600461109a565b610331565b600054610122906001600160a01b031681565b6040516001600160a01b0390911681526020016100b8565b6100ab610148366004611434565b610382565b61016061015b3660046114a4565b6107af565b6040516100b891906114d8565b61018061017b366004611588565b61096b565b6040516100b89190611620565b6060600061019a83610331565b90506101a581610b2a565b610140840152825160005460408051631cfe795160e01b815290516001600160a01b0390921691631cfe7951916004808201926020929091908290030181865afa1580156101f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021b919061170c565b60405161023a9291906001906000908190819081908990602001611745565b604051602081830303815290604052915050919050565b600054604051630f2d140160e11b81526001600160a01b0390911690631e5a28029061028190849060040161120e565b600060405180830381600087803b15801561029b57600080fd5b505af11580156102af573d6000803e3d6000fd5b5050505050565b6000546040516323aa2a9d60e01b8152600481018390526001600160a01b03909116906323aa2a9d90602401610281565b606060006102f48561096b565b6001815263ffffffff4216602082015261ffff851660608201526001600160a01b038416608082015290506103288161018d565b95945050505050565b606081602001518260400151836060015184608001518560a001518660c001518760e0015160405160200161036c97969594939291906117bb565b6040516020818303038152906040529050919050565b606060008086516001600160401b038111156103a0576103a0610e45565b6040519080825280602002602001820160405280156103d957816020015b6103c6610dea565b8152602001906001900390816103be5790505b50905060005b87518110156105045761040a8882815181106103fd576103fd611842565b602002602001015161096b565b82828151811061041c5761041c611842565b60200260200101819052504282828151811061043a5761043a611842565b60200260200101516020019063ffffffff16908163ffffffff16815250508582828151811061046b5761046b611842565b60200260200101516060019061ffff16908161ffff1681525050846001600160a01b031660001b8282815181106104a4576104a4611842565b602002602001015160800181815250508663ffffffff168282815181106104cd576104cd611842565b60200260200101516040015163ffffffff16036104f2576104ef60018461186e565b92505b806104fc81611887565b9150506103df565b50606060008360ff166001600160401b0381111561052457610524610e45565b60405190808252806020026020018201604052801561054d578160200160208202803683370190505b5090506000805b8a518110156106fd578963ffffffff1685828151811061057657610576611842565b60200260200101516040015163ffffffff16036106eb5760008582815181106105a1576105a1611842565b6020026020010151602001518683815181106105bf576105bf611842565b6020026020010151604001518784815181106105dd576105dd611842565b6020026020010151606001518885815181106105fb576105fb611842565b60200260200101516080015189868151811061061957610619611842565b602002602001015160a001518a878151811061063757610637611842565b602002602001015160c001518b888151811061065557610655611842565b602002602001015160e0015160405160200161067797969594939291906117bb565b604051602081830303815290604052905061069181610b2a565b848460ff16815181106106a6576106a6611842565b60200260200101818152505084838251836040516020016106ca94939291906118a0565b604051602081830303815290604052945082806106e6906118fc565b935050505b806106f581611887565b915050610554565b5060005460408051631cfe795160e01b815290516002926001600160a01b031691631cfe79519160048083019260209291908290030181865afa158015610748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076c919061170c565b6040516107919291906001906000908190819081908d908b9082908e9060200161191b565b60405160208183030381529060405295505050505050949350505050565b60606000805b835181101561083c577f6eb224fb001ed210e379b335e35efe88672a8ce935d981a6896b27ffdf52a3b28482815181106107f1576107f1611842565b60200260200101516000015160008151811061080f5761080f611842565b60200260200101510361082a576108276001836119d9565b91505b8061083481611887565b9150506107b5565b506000816001600160401b0381111561085757610857610e45565b60405190808252806020026020018201604052801561089c57816020015b60408051808201909152606080825260208201528152602001906001900390816108755790505b5090506000805b8551811015610961577f6eb224fb001ed210e379b335e35efe88672a8ce935d981a6896b27ffdf52a3b28682815181106108df576108df611842565b6020026020010151600001516000815181106108fd576108fd611842565b60200260200101510361094f5785818151811061091c5761091c611842565b602002602001015183838151811061093657610936611842565b602090810291909101015261094c6001836119d9565b91505b8061095981611887565b9150506108a3565b5090949350505050565b610973610dea565b6000826000015160018151811061098c5761098c611842565b60200260200101518260800181815250506109c460088260206109af91906119d9565b6109b991906119ec565b602085015190610b63565b6001600160401b031660a08301526109dd6020826119d9565b9050610a0460046109ef8360206119d9565b6109f991906119ec565b602085015190610bc6565b63ffffffff166040830152610a1a6020826119d9565b9050610a276020826119d9565b9050610a4e6001610a398360206119d9565b610a4391906119ec565b602085015190610c23565b60ff1660c0830152610a616020826119d9565b90506000610a7c828560200151610c7f90919063ffffffff16565b9050610a896020836119d9565b6020850151909250610a9c908383610cdd565b60e0840152610aab81836119d9565b915081846020015151610abe91906119ec565b610ac890836119d9565b91508360200151518214610b235760405162461bcd60e51b815260206004820181905260248201527f6661696c656420746f20706172736520776f726d686f6c65206d65737361676560448201526064015b60405180910390fd5b5050919050565b60008180519060200120604051602001610b4691815260200190565b604051602081830303815290604052805190602001209050919050565b6000610b708260086119d9565b83511015610bb75760405162461bcd60e51b8152602060048201526014602482015273746f55696e7436345f6f75744f66426f756e647360601b6044820152606401610b1a565b50818101600801515b92915050565b6000610bd38260046119d9565b83511015610c1a5760405162461bcd60e51b8152602060048201526014602482015273746f55696e7433325f6f75744f66426f756e647360601b6044820152606401610b1a565b50016004015190565b6000610c308260016119d9565b83511015610c765760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b6044820152606401610b1a565b50016001015190565b6000610c8c8260206119d9565b83511015610cd45760405162461bcd60e51b8152602060048201526015602482015274746f55696e743235365f6f75744f66426f756e647360581b6044820152606401610b1a565b50016020015190565b606081610ceb81601f6119d9565b1015610d2a5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610b1a565b610d3482846119d9565b84511015610d785760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610b1a565b606082158015610d975760405191506000825260208201604052610de1565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610dd0578051835260209283019201610db8565b5050858452601f01601f1916604052505b50949350505050565b604080516101608101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201819052610100820183905261012082015261014081019190915290565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715610e7d57610e7d610e45565b60405290565b60405161016081016001600160401b0381118282101715610e7d57610e7d610e45565b604080519081016001600160401b0381118282101715610e7d57610e7d610e45565b604051601f8201601f191681016001600160401b0381118282101715610ef057610ef0610e45565b604052919050565b803560ff81168114610f0957600080fd5b919050565b63ffffffff81168114610f2057600080fd5b50565b8035610f0981610f0e565b803561ffff81168114610f0957600080fd5b80356001600160401b0381168114610f0957600080fd5b600082601f830112610f6857600080fd5b81356001600160401b03811115610f8157610f81610e45565b610f94601f8201601f1916602001610ec8565b818152846020838601011115610fa957600080fd5b816020850160208301376000918101602001919091529392505050565b60006001600160401b03821115610fdf57610fdf610e45565b5060051b60200190565b600082601f830112610ffa57600080fd5b8135602061100f61100a83610fc6565b610ec8565b82815260079290921b8401810191818101908684111561102e57600080fd5b8286015b8481101561108f576080818903121561104b5760008081fd5b611053610e5b565b813581528482013585820152604061106c818401610ef8565b90820152606061107d838201610ef8565b90820152835291830191608001611032565b509695505050505050565b6000602082840312156110ac57600080fd5b81356001600160401b03808211156110c357600080fd5b9083019061016082860312156110d857600080fd5b6110e0610e83565b6110e983610ef8565b81526110f760208401610f23565b602082015261110860408401610f23565b604082015261111960608401610f2e565b60608201526080830135608082015261113460a08401610f40565b60a082015261114560c08401610ef8565b60c082015260e08301358281111561115c57600080fd5b61116887828601610f57565b60e08301525061010061117c818501610f23565b90820152610120838101358381111561119457600080fd5b6111a088828701610fe9565b91830191909152506101409283013592810192909252509392505050565b60005b838110156111d95781810151838201526020016111c1565b50506000910152565b600081518084526111fa8160208601602086016111be565b601f01601f19169290920160200192915050565b60208152600061122160208301846111e2565b9392505050565b60006020828403121561123a57600080fd5b81356001600160401b0381111561125057600080fd5b61125c84828501610f57565b949350505050565b60006020828403121561127657600080fd5b5035919050565b60006040828403121561128f57600080fd5b611297610ea6565b905081356001600160401b03808211156112b057600080fd5b818401915084601f8301126112c457600080fd5b813560206112d461100a83610fc6565b82815260059290921b840181019181810190888411156112f357600080fd5b948201945b83861015611311578535825294820194908201906112f8565b8652508581013593508284111561132757600080fd5b61133387858801610f57565b818601525050505092915050565b80356001600160a01b0381168114610f0957600080fd5b60008060006060848603121561136d57600080fd5b83356001600160401b0381111561138357600080fd5b61138f8682870161127d565b93505061139e60208501610f2e565b91506113ac60408501611341565b90509250925092565b600082601f8301126113c657600080fd5b813560206113d661100a83610fc6565b82815260059290921b840181019181810190868411156113f557600080fd5b8286015b8481101561108f5780356001600160401b038111156114185760008081fd5b6114268986838b010161127d565b8452509183019183016113f9565b6000806000806080858703121561144a57600080fd5b84356001600160401b0381111561146057600080fd5b61146c878288016113b5565b945050602085013561147d81610f0e565b925061148b60408601610f2e565b915061149960608601611341565b905092959194509250565b6000602082840312156114b657600080fd5b81356001600160401b038111156114cc57600080fd5b61125c848285016113b5565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561157957898403603f19018652825180518886528051898701819052908a0190849060608801905b8083101561154c5783518252928c019260019290920191908c019061152c565b50928b0151878403888d01529261156381856111e2565b998c019997505050938901935050600101611500565b50919998505050505050505050565b60006020828403121561159a57600080fd5b81356001600160401b038111156115b057600080fd5b61125c8482850161127d565b600081518084526020808501945080840160005b8381101561161557815180518852838101518489015260408082015160ff908116918a01919091526060918201511690880152608090960195908201906001016115d0565b509495945050505050565b6020815261163460208201835160ff169052565b6000602083015161164d604084018263ffffffff169052565b50604083015163ffffffff8116606084015250606083015161ffff8116608084015250608083015160a083015260a083015161169460c08401826001600160401b03169052565b5060c083015160ff811660e08401525060e083015161016061010081818601526116c26101808601846111e2565b908601519092506101206116dd8682018363ffffffff169052565b80870151915050610140601f1986850301818701526116fc84836115bc565b9601519190940152509192915050565b60006020828403121561171e57600080fd5b815161122181610f0e565b6000815161173b8185602086016111be565b9290920192915050565b600060ff60f81b808b60f81b16835263ffffffff60e01b8a60e01b166001840152808960f81b166005840152808860f81b166006840152866007840152856027840152808560f81b1660478401525082516117a78160488501602087016111be565b919091016048019998505050505050505050565b6001600160e01b031960e089811b8216835288901b1660048201526001600160f01b031960f087901b166008820152600a81018590526001600160c01b031960c085901b16602a8201526001600160f81b031960f884901b166032820152815160009061182f8160338501602087016111be565b9190910160330198975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60ff8181168382160190811115610bc057610bc0611858565b60006001820161189957611899611858565b5060010190565b600085516118b2818460208a016111be565b60f886901b6001600160f81b03191690830190815260e085901b6001600160e01b031916600182015283516118ee8160058401602088016111be565b016005019695505050505050565b600060ff821660ff810361191257611912611858565b60010192915050565b600060ff60f81b808e60f81b168352600163ffffffff60e01b8e60e01b1681850152818d60f81b166005850152818c60f81b1660068501528a6007850152896027850152818960f81b166047850152818860f81b1660488501526049840191508651602080890160005b838110156119a0578151865294820194908201908401611985565b505050506119ba828760f81b6001600160f81b0319169052565b6119c681830186611729565b9f9e505050505050505050505050505050565b80820180821115610bc057610bc0611858565b81810381811115610bc057610bc061185856fea26469706673582212205702d8d1f42cc6deb44c4622b43747e170c744083d2f9aa5ff43f7f3da2755cc64736f6c63430008130033";

type FakeWormholeSimulatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FakeWormholeSimulatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FakeWormholeSimulator__factory extends ContractFactory {
  constructor(...args: FakeWormholeSimulatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    initWormhole: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FakeWormholeSimulator> {
    return super.deploy(
      initWormhole,
      overrides || {}
    ) as Promise<FakeWormholeSimulator>;
  }
  override getDeployTransaction(
    initWormhole: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(initWormhole, overrides || {});
  }
  override attach(address: string): FakeWormholeSimulator {
    return super.attach(address) as FakeWormholeSimulator;
  }
  override connect(signer: Signer): FakeWormholeSimulator__factory {
    return super.connect(signer) as FakeWormholeSimulator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FakeWormholeSimulatorInterface {
    return new utils.Interface(_abi) as FakeWormholeSimulatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FakeWormholeSimulator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FakeWormholeSimulator;
  }
}
