{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "additionalVaas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "sourceAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "sourceChain",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "deliveryHash",
          "type": "bytes32"
        }
      ],
      "name": "receiveWormholeMessages",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)": "529dca32"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"additionalVaas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"sourceAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"sourceChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"receiveWormholeMessages\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)\":{\"params\":{\"additionalVaas\":\"- Additional VAAs which were requested to be included in this delivery.   They are guaranteed to all be included and in the same order as was specified in the     delivery request.\",\"deliveryHash\":\"- the VAA hash of the deliveryVAA. NOTE: These signedVaas are NOT verified by the Wormhole core contract prior to being provided     to this call. Always make sure `parseAndVerify()` is called on the Wormhole core contract     before trusting the content of a raw VAA, otherwise the VAA may be invalid or malicious.\",\"payload\":\"- an arbitrary message which was included in the delivery by the     requester.\",\"sourceAddress\":\"- the (wormhole format) address on the sending chain which requested     this delivery.\",\"sourceChain\":\"- the wormhole chain ID where this delivery was requested.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)\":{\"notice\":\"When a `send` is performed with this contract as the target, this function will be     invoked.   To get the address that will invoke this contract, call the `getDeliveryAddress()` function     on this chain (the target chain)'s WormholeRelayer contract NOTE: This function should be restricted such that only `getDeliveryAddress()` can call it. We also recommend that this function:   - Stores all received `deliveryData.deliveryHash`s in a mapping `(bytes32 => bool)`, and       on every call, checks that deliveryData.deliveryHash has not already been stored in the       map (This is to prevent other users maliciously trying to relay the same message)   - Checks that `deliveryData.sourceChain` and `deliveryData.sourceAddress` are indeed who       you expect to have requested the calling of `send` or `forward` on the source chain The invocation of this function corresponding to the `send` request will have msg.value equal   to the receiverValue specified in the send request. If the invocation of this function reverts or exceeds the gas limit (`maxTransactionFee`)   specified by the send requester, this delivery will result in a `ReceiverFailure`.\"}},\"notice\":\"Interface for a contract which can receive Wormhole messages.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/relayer/IWormholeReceiver.sol\":\"IWormholeReceiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@solidity-parser/=node_modules/@solidity-parser/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":truffle/=node_modules/truffle/\"]},\"sources\":{\"contracts/interfaces/relayer/IWormholeReceiver.sol\":{\"keccak256\":\"0x913a548035bcf955d2e8ad8000fe9477adf56581751025b29423c5427ea72940\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://9d16b6226faeac18aa427cbddc58685207a838a25ae83f8962657ac996e178a8\",\"dweb:/ipfs/Qma5XT8HGGn3LnWj4heqXBFUj1mDYkUGiDpJXhTz22YNha\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            },
            {
              "internalType": "bytes[]",
              "name": "additionalVaas",
              "type": "bytes[]"
            },
            {
              "internalType": "bytes32",
              "name": "sourceAddress",
              "type": "bytes32"
            },
            {
              "internalType": "uint16",
              "name": "sourceChain",
              "type": "uint16"
            },
            {
              "internalType": "bytes32",
              "name": "deliveryHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "receiveWormholeMessages"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)": {
            "params": {
              "additionalVaas": "- Additional VAAs which were requested to be included in this delivery.   They are guaranteed to all be included and in the same order as was specified in the     delivery request.",
              "deliveryHash": "- the VAA hash of the deliveryVAA. NOTE: These signedVaas are NOT verified by the Wormhole core contract prior to being provided     to this call. Always make sure `parseAndVerify()` is called on the Wormhole core contract     before trusting the content of a raw VAA, otherwise the VAA may be invalid or malicious.",
              "payload": "- an arbitrary message which was included in the delivery by the     requester.",
              "sourceAddress": "- the (wormhole format) address on the sending chain which requested     this delivery.",
              "sourceChain": "- the wormhole chain ID where this delivery was requested."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)": {
            "notice": "When a `send` is performed with this contract as the target, this function will be     invoked.   To get the address that will invoke this contract, call the `getDeliveryAddress()` function     on this chain (the target chain)'s WormholeRelayer contract NOTE: This function should be restricted such that only `getDeliveryAddress()` can call it. We also recommend that this function:   - Stores all received `deliveryData.deliveryHash`s in a mapping `(bytes32 => bool)`, and       on every call, checks that deliveryData.deliveryHash has not already been stored in the       map (This is to prevent other users maliciously trying to relay the same message)   - Checks that `deliveryData.sourceChain` and `deliveryData.sourceAddress` are indeed who       you expect to have requested the calling of `send` or `forward` on the source chain The invocation of this function corresponding to the `send` request will have msg.value equal   to the receiverValue specified in the send request. If the invocation of this function reverts or exceeds the gas limit (`maxTransactionFee`)   specified by the send requester, this delivery will result in a `ReceiverFailure`."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@solidity-parser/=node_modules/@solidity-parser/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":truffle/=node_modules/truffle/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/interfaces/relayer/IWormholeReceiver.sol": "IWormholeReceiver"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/interfaces/relayer/IWormholeReceiver.sol": {
        "keccak256": "0x913a548035bcf955d2e8ad8000fe9477adf56581751025b29423c5427ea72940",
        "urls": [
          "bzz-raw://9d16b6226faeac18aa427cbddc58685207a838a25ae83f8962657ac996e178a8",
          "dweb:/ipfs/Qma5XT8HGGn3LnWj4heqXBFUj1mDYkUGiDpJXhTz22YNha"
        ],
        "license": "Apache 2"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/interfaces/relayer/IWormholeReceiver.sol",
    "id": 9491,
    "exportedSymbols": {
      "IWormholeReceiver": [
        9490
      ]
    },
    "nodeType": "SourceUnit",
    "src": "38:2594:36",
    "nodes": [
      {
        "id": 9473,
        "nodeType": "PragmaDirective",
        "src": "38:23:36",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 9490,
        "nodeType": "ContractDefinition",
        "src": "144:2487:36",
        "nodes": [
          {
            "id": 9489,
            "nodeType": "FunctionDefinition",
            "src": "2415:214:36",
            "nodes": [],
            "documentation": {
              "id": 9475,
              "nodeType": "StructuredDocumentation",
              "src": "178:2232:36",
              "text": " @notice When a `send` is performed with this contract as the target, this function will be\n     invoked.\n   To get the address that will invoke this contract, call the `getDeliveryAddress()` function\n     on this chain (the target chain)'s WormholeRelayer contract\n NOTE: This function should be restricted such that only `getDeliveryAddress()` can call it.\n We also recommend that this function:\n   - Stores all received `deliveryData.deliveryHash`s in a mapping `(bytes32 => bool)`, and\n       on every call, checks that deliveryData.deliveryHash has not already been stored in the\n       map (This is to prevent other users maliciously trying to relay the same message)\n   - Checks that `deliveryData.sourceChain` and `deliveryData.sourceAddress` are indeed who\n       you expect to have requested the calling of `send` or `forward` on the source chain\n The invocation of this function corresponding to the `send` request will have msg.value equal\n   to the receiverValue specified in the send request.\n If the invocation of this function reverts or exceeds the gas limit (`maxTransactionFee`)\n   specified by the send requester, this delivery will result in a `ReceiverFailure`.\n @param payload - an arbitrary message which was included in the delivery by the\n     requester.\n @param additionalVaas - Additional VAAs which were requested to be included in this delivery.\n   They are guaranteed to all be included and in the same order as was specified in the\n     delivery request.\n @param sourceAddress - the (wormhole format) address on the sending chain which requested\n     this delivery.\n @param sourceChain - the wormhole chain ID where this delivery was requested.\n @param deliveryHash - the VAA hash of the deliveryVAA.\n NOTE: These signedVaas are NOT verified by the Wormhole core contract prior to being provided\n     to this call. Always make sure `parseAndVerify()` is called on the Wormhole core contract\n     before trusting the content of a raw VAA, otherwise the VAA may be invalid or malicious."
            },
            "functionSelector": "529dca32",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "receiveWormholeMessages",
            "nameLocation": "2424:23:36",
            "parameters": {
              "id": 9487,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9477,
                  "mutability": "mutable",
                  "name": "payload",
                  "nameLocation": "2470:7:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 9489,
                  "src": "2457:20:36",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 9476,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2457:5:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9480,
                  "mutability": "mutable",
                  "name": "additionalVaas",
                  "nameLocation": "2502:14:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 9489,
                  "src": "2487:29:36",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 9478,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "2487:5:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 9479,
                    "nodeType": "ArrayTypeName",
                    "src": "2487:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9482,
                  "mutability": "mutable",
                  "name": "sourceAddress",
                  "nameLocation": "2534:13:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 9489,
                  "src": "2526:21:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 9481,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2526:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9484,
                  "mutability": "mutable",
                  "name": "sourceChain",
                  "nameLocation": "2564:11:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 9489,
                  "src": "2557:18:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  },
                  "typeName": {
                    "id": 9483,
                    "name": "uint16",
                    "nodeType": "ElementaryTypeName",
                    "src": "2557:6:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9486,
                  "mutability": "mutable",
                  "name": "deliveryHash",
                  "nameLocation": "2593:12:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 9489,
                  "src": "2585:20:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 9485,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2585:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2447:164:36"
            },
            "returnParameters": {
              "id": 9488,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2628:0:36"
            },
            "scope": 9490,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IWormholeReceiver",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 9474,
          "nodeType": "StructuredDocumentation",
          "src": "63:80:36",
          "text": " @notice Interface for a contract which can receive Wormhole messages."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          9490
        ],
        "name": "IWormholeReceiver",
        "nameLocation": "154:17:36",
        "scope": 9491,
        "usedErrors": []
      }
    ],
    "license": "Apache 2"
  },
  "id": 36
}