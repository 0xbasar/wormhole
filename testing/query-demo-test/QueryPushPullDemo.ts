/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type ParsedPerChainQueryResponseStruct = {
  chainId: PromiseOrValue<BigNumberish>;
  queryType: PromiseOrValue<BigNumberish>;
  request: PromiseOrValue<BytesLike>;
  response: PromiseOrValue<BytesLike>;
};

export type ParsedPerChainQueryResponseStructOutput = [
  number,
  number,
  string,
  string
] & { chainId: number; queryType: number; request: string; response: string };

export type ParsedQueryResponseStruct = {
  version: PromiseOrValue<BigNumberish>;
  senderChainId: PromiseOrValue<BigNumberish>;
  nonce: PromiseOrValue<BigNumberish>;
  requestId: PromiseOrValue<BytesLike>;
  responses: ParsedPerChainQueryResponseStruct[];
};

export type ParsedQueryResponseStructOutput = [
  number,
  number,
  number,
  string,
  ParsedPerChainQueryResponseStructOutput[]
] & {
  version: number;
  senderChainId: number;
  nonce: number;
  requestId: string;
  responses: ParsedPerChainQueryResponseStructOutput[];
};

export type EthCallDataStruct = {
  contractAddress: PromiseOrValue<string>;
  callData: PromiseOrValue<BytesLike>;
  result: PromiseOrValue<BytesLike>;
};

export type EthCallDataStructOutput = [string, string, string] & {
  contractAddress: string;
  callData: string;
  result: string;
};

export type EthCallByTimestampQueryResponseStruct = {
  requestTargetBlockIdHint: PromiseOrValue<BytesLike>;
  requestFollowingBlockIdHint: PromiseOrValue<BytesLike>;
  requestTargetTimestamp: PromiseOrValue<BigNumberish>;
  targetBlockNum: PromiseOrValue<BigNumberish>;
  targetBlockTime: PromiseOrValue<BigNumberish>;
  followingBlockNum: PromiseOrValue<BigNumberish>;
  targetBlockHash: PromiseOrValue<BytesLike>;
  followingBlockHash: PromiseOrValue<BytesLike>;
  followingBlockTime: PromiseOrValue<BigNumberish>;
  result: EthCallDataStruct[];
};

export type EthCallByTimestampQueryResponseStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  BigNumber,
  EthCallDataStructOutput[]
] & {
  requestTargetBlockIdHint: string;
  requestFollowingBlockIdHint: string;
  requestTargetTimestamp: BigNumber;
  targetBlockNum: BigNumber;
  targetBlockTime: BigNumber;
  followingBlockNum: BigNumber;
  targetBlockHash: string;
  followingBlockHash: string;
  followingBlockTime: BigNumber;
  result: EthCallDataStructOutput[];
};

export type EthCallQueryResponseStruct = {
  requestBlockId: PromiseOrValue<BytesLike>;
  blockNum: PromiseOrValue<BigNumberish>;
  blockTime: PromiseOrValue<BigNumberish>;
  blockHash: PromiseOrValue<BytesLike>;
  result: EthCallDataStruct[];
};

export type EthCallQueryResponseStructOutput = [
  string,
  BigNumber,
  BigNumber,
  string,
  EthCallDataStructOutput[]
] & {
  requestBlockId: string;
  blockNum: BigNumber;
  blockTime: BigNumber;
  blockHash: string;
  result: EthCallDataStructOutput[];
};

export type EthCallWithFinalityQueryResponseStruct = {
  requestBlockId: PromiseOrValue<BytesLike>;
  requestFinality: PromiseOrValue<BytesLike>;
  blockNum: PromiseOrValue<BigNumberish>;
  blockTime: PromiseOrValue<BigNumberish>;
  blockHash: PromiseOrValue<BytesLike>;
  result: EthCallDataStruct[];
};

export type EthCallWithFinalityQueryResponseStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  EthCallDataStructOutput[]
] & {
  requestBlockId: string;
  requestFinality: string;
  blockNum: BigNumber;
  blockTime: BigNumber;
  blockHash: string;
  result: EthCallDataStructOutput[];
};

export declare namespace QueryPushPullDemo {
  export type MessageStruct = {
    payloadID: PromiseOrValue<BigNumberish>;
    sequence: PromiseOrValue<BigNumberish>;
    destinationChainID: PromiseOrValue<BigNumberish>;
    message: PromiseOrValue<string>;
  };

  export type MessageStructOutput = [number, BigNumber, number, string] & {
    payloadID: number;
    sequence: BigNumber;
    destinationChainID: number;
    message: string;
  };
}

export declare namespace IWormhole {
  export type SignatureStruct = {
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
    v: PromiseOrValue<BigNumberish>;
    guardianIndex: PromiseOrValue<BigNumberish>;
  };

  export type SignatureStructOutput = [string, string, number, number] & {
    r: string;
    s: string;
    v: number;
    guardianIndex: number;
  };
}

export interface QueryPushPullDemoInterface extends utils.Interface {
  functions: {
    "QT_ETH_CALL()": FunctionFragment;
    "QT_ETH_CALL_BY_TIMESTAMP()": FunctionFragment;
    "QT_ETH_CALL_WITH_FINALITY()": FunctionFragment;
    "QT_MAX()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "decodeMessage(bytes)": FunctionFragment;
    "encodeMessage((uint8,uint64,uint16,string))": FunctionFragment;
    "getResponseDigest(bytes)": FunctionFragment;
    "getResponseHash(bytes)": FunctionFragment;
    "hasReceivedMessage(bytes32)": FunctionFragment;
    "hasReceivedPushMessage(bytes32)": FunctionFragment;
    "hasSentMessage(bytes32)": FunctionFragment;
    "parseAndVerifyQueryResponse(address,bytes,(bytes32,bytes32,uint8,uint8)[])": FunctionFragment;
    "parseEthCallByTimestampQueryResponse((uint16,uint8,bytes,bytes))": FunctionFragment;
    "parseEthCallQueryResponse((uint16,uint8,bytes,bytes))": FunctionFragment;
    "parseEthCallWithFinalityQueryResponse((uint16,uint8,bytes,bytes))": FunctionFragment;
    "receivePullMessages(bytes,(bytes32,bytes32,uint8,uint8)[],bytes[])": FunctionFragment;
    "receivePushMessage(bytes)": FunctionFragment;
    "responsePrefix()": FunctionFragment;
    "sendPullMessage(uint16,string)": FunctionFragment;
    "sendPushMessage(uint16,string)": FunctionFragment;
    "sequence()": FunctionFragment;
    "updateRegistration(uint16,bytes32)": FunctionFragment;
    "verifyQueryResponseSignatures(address,bytes,(bytes32,bytes32,uint8,uint8)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "QT_ETH_CALL"
      | "QT_ETH_CALL_BY_TIMESTAMP"
      | "QT_ETH_CALL_WITH_FINALITY"
      | "QT_MAX"
      | "VERSION"
      | "decodeMessage"
      | "encodeMessage"
      | "getResponseDigest"
      | "getResponseHash"
      | "hasReceivedMessage"
      | "hasReceivedPushMessage"
      | "hasSentMessage"
      | "parseAndVerifyQueryResponse"
      | "parseEthCallByTimestampQueryResponse"
      | "parseEthCallQueryResponse"
      | "parseEthCallWithFinalityQueryResponse"
      | "receivePullMessages"
      | "receivePushMessage"
      | "responsePrefix"
      | "sendPullMessage"
      | "sendPushMessage"
      | "sequence"
      | "updateRegistration"
      | "verifyQueryResponseSignatures"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "QT_ETH_CALL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QT_ETH_CALL_BY_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QT_ETH_CALL_WITH_FINALITY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "QT_MAX", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decodeMessage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeMessage",
    values: [QueryPushPullDemo.MessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getResponseDigest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getResponseHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasReceivedMessage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasReceivedPushMessage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSentMessage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseAndVerifyQueryResponse",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      IWormhole.SignatureStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "parseEthCallByTimestampQueryResponse",
    values: [ParsedPerChainQueryResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "parseEthCallQueryResponse",
    values: [ParsedPerChainQueryResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "parseEthCallWithFinalityQueryResponse",
    values: [ParsedPerChainQueryResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "receivePullMessages",
    values: [
      PromiseOrValue<BytesLike>,
      IWormhole.SignatureStruct[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "receivePushMessage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "responsePrefix",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendPullMessage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendPushMessage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "sequence", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateRegistration",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyQueryResponseSignatures",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      IWormhole.SignatureStruct[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "QT_ETH_CALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QT_ETH_CALL_BY_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QT_ETH_CALL_WITH_FINALITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "QT_MAX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResponseDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResponseHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasReceivedMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasReceivedPushMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSentMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseAndVerifyQueryResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseEthCallByTimestampQueryResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseEthCallQueryResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseEthCallWithFinalityQueryResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivePullMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivePushMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "responsePrefix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendPullMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendPushMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sequence", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyQueryResponseSignatures",
    data: BytesLike
  ): Result;

  events: {
    "pullMessagePublished(uint8,uint64,uint16,string)": EventFragment;
    "pullMessageReceived(uint16,uint8,uint64,uint16,string)": EventFragment;
    "pushMessageReceived(uint16,uint8,uint64,uint16,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "pullMessagePublished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "pullMessageReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "pushMessageReceived"): EventFragment;
}

export interface pullMessagePublishedEventObject {
  payloadID: number;
  sequence: BigNumber;
  destinationChainID: number;
  message: string;
}
export type pullMessagePublishedEvent = TypedEvent<
  [number, BigNumber, number, string],
  pullMessagePublishedEventObject
>;

export type pullMessagePublishedEventFilter =
  TypedEventFilter<pullMessagePublishedEvent>;

export interface pullMessageReceivedEventObject {
  sourceChainID: number;
  payloadID: number;
  sequence: BigNumber;
  destinationChainID: number;
  message: string;
}
export type pullMessageReceivedEvent = TypedEvent<
  [number, number, BigNumber, number, string],
  pullMessageReceivedEventObject
>;

export type pullMessageReceivedEventFilter =
  TypedEventFilter<pullMessageReceivedEvent>;

export interface pushMessageReceivedEventObject {
  sourceChainID: number;
  payloadID: number;
  sequence: BigNumber;
  destinationChainID: number;
  message: string;
}
export type pushMessageReceivedEvent = TypedEvent<
  [number, number, BigNumber, number, string],
  pushMessageReceivedEventObject
>;

export type pushMessageReceivedEventFilter =
  TypedEventFilter<pushMessageReceivedEvent>;

export interface QueryPushPullDemo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QueryPushPullDemoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    QT_ETH_CALL(overrides?: CallOverrides): Promise<[number]>;

    QT_ETH_CALL_BY_TIMESTAMP(overrides?: CallOverrides): Promise<[number]>;

    QT_ETH_CALL_WITH_FINALITY(overrides?: CallOverrides): Promise<[number]>;

    QT_MAX(overrides?: CallOverrides): Promise<[number]>;

    VERSION(overrides?: CallOverrides): Promise<[number]>;

    decodeMessage(
      encodedMessage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [QueryPushPullDemo.MessageStructOutput] & {
        parsedMessage: QueryPushPullDemo.MessageStructOutput;
      }
    >;

    encodeMessage(
      parsedMessage: QueryPushPullDemo.MessageStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { encodedMessage: string }>;

    getResponseDigest(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getResponseHash(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasReceivedMessage(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasReceivedPushMessage(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasSentMessage(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    parseAndVerifyQueryResponse(
      wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<
      [ParsedQueryResponseStructOutput] & { r: ParsedQueryResponseStructOutput }
    >;

    parseEthCallByTimestampQueryResponse(
      pcr: ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides
    ): Promise<
      [EthCallByTimestampQueryResponseStructOutput] & {
        r: EthCallByTimestampQueryResponseStructOutput;
      }
    >;

    parseEthCallQueryResponse(
      pcr: ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides
    ): Promise<
      [EthCallQueryResponseStructOutput] & {
        r: EthCallQueryResponseStructOutput;
      }
    >;

    parseEthCallWithFinalityQueryResponse(
      pcr: ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides
    ): Promise<
      [EthCallWithFinalityQueryResponseStructOutput] & {
        r: EthCallWithFinalityQueryResponseStructOutput;
      }
    >;

    receivePullMessages(
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      messages: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receivePushMessage(
      encodedMessage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    responsePrefix(overrides?: CallOverrides): Promise<[string]>;

    sendPullMessage(
      _destinationChainID: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendPushMessage(
      _destinationChainID: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sequence(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateRegistration(
      _chainID: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyQueryResponseSignatures(
      _wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  QT_ETH_CALL(overrides?: CallOverrides): Promise<number>;

  QT_ETH_CALL_BY_TIMESTAMP(overrides?: CallOverrides): Promise<number>;

  QT_ETH_CALL_WITH_FINALITY(overrides?: CallOverrides): Promise<number>;

  QT_MAX(overrides?: CallOverrides): Promise<number>;

  VERSION(overrides?: CallOverrides): Promise<number>;

  decodeMessage(
    encodedMessage: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<QueryPushPullDemo.MessageStructOutput>;

  encodeMessage(
    parsedMessage: QueryPushPullDemo.MessageStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getResponseDigest(
    response: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getResponseHash(
    response: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  hasReceivedMessage(
    digest: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasReceivedPushMessage(
    digest: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasSentMessage(
    digest: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  parseAndVerifyQueryResponse(
    wormhole: PromiseOrValue<string>,
    response: PromiseOrValue<BytesLike>,
    signatures: IWormhole.SignatureStruct[],
    overrides?: CallOverrides
  ): Promise<ParsedQueryResponseStructOutput>;

  parseEthCallByTimestampQueryResponse(
    pcr: ParsedPerChainQueryResponseStruct,
    overrides?: CallOverrides
  ): Promise<EthCallByTimestampQueryResponseStructOutput>;

  parseEthCallQueryResponse(
    pcr: ParsedPerChainQueryResponseStruct,
    overrides?: CallOverrides
  ): Promise<EthCallQueryResponseStructOutput>;

  parseEthCallWithFinalityQueryResponse(
    pcr: ParsedPerChainQueryResponseStruct,
    overrides?: CallOverrides
  ): Promise<EthCallWithFinalityQueryResponseStructOutput>;

  receivePullMessages(
    response: PromiseOrValue<BytesLike>,
    signatures: IWormhole.SignatureStruct[],
    messages: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receivePushMessage(
    encodedMessage: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  responsePrefix(overrides?: CallOverrides): Promise<string>;

  sendPullMessage(
    _destinationChainID: PromiseOrValue<BigNumberish>,
    _message: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendPushMessage(
    _destinationChainID: PromiseOrValue<BigNumberish>,
    _message: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sequence(overrides?: CallOverrides): Promise<BigNumber>;

  updateRegistration(
    _chainID: PromiseOrValue<BigNumberish>,
    _contractAddress: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyQueryResponseSignatures(
    _wormhole: PromiseOrValue<string>,
    response: PromiseOrValue<BytesLike>,
    signatures: IWormhole.SignatureStruct[],
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    QT_ETH_CALL(overrides?: CallOverrides): Promise<number>;

    QT_ETH_CALL_BY_TIMESTAMP(overrides?: CallOverrides): Promise<number>;

    QT_ETH_CALL_WITH_FINALITY(overrides?: CallOverrides): Promise<number>;

    QT_MAX(overrides?: CallOverrides): Promise<number>;

    VERSION(overrides?: CallOverrides): Promise<number>;

    decodeMessage(
      encodedMessage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<QueryPushPullDemo.MessageStructOutput>;

    encodeMessage(
      parsedMessage: QueryPushPullDemo.MessageStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getResponseDigest(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getResponseHash(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    hasReceivedMessage(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasReceivedPushMessage(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasSentMessage(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    parseAndVerifyQueryResponse(
      wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<ParsedQueryResponseStructOutput>;

    parseEthCallByTimestampQueryResponse(
      pcr: ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides
    ): Promise<EthCallByTimestampQueryResponseStructOutput>;

    parseEthCallQueryResponse(
      pcr: ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides
    ): Promise<EthCallQueryResponseStructOutput>;

    parseEthCallWithFinalityQueryResponse(
      pcr: ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides
    ): Promise<EthCallWithFinalityQueryResponseStructOutput>;

    receivePullMessages(
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      messages: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    receivePushMessage(
      encodedMessage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    responsePrefix(overrides?: CallOverrides): Promise<string>;

    sendPullMessage(
      _destinationChainID: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendPushMessage(
      _destinationChainID: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sequence(overrides?: CallOverrides): Promise<BigNumber>;

    updateRegistration(
      _chainID: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyQueryResponseSignatures(
      _wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "pullMessagePublished(uint8,uint64,uint16,string)"(
      payloadID?: null,
      sequence?: null,
      destinationChainID?: null,
      message?: null
    ): pullMessagePublishedEventFilter;
    pullMessagePublished(
      payloadID?: null,
      sequence?: null,
      destinationChainID?: null,
      message?: null
    ): pullMessagePublishedEventFilter;

    "pullMessageReceived(uint16,uint8,uint64,uint16,string)"(
      sourceChainID?: null,
      payloadID?: null,
      sequence?: null,
      destinationChainID?: null,
      message?: null
    ): pullMessageReceivedEventFilter;
    pullMessageReceived(
      sourceChainID?: null,
      payloadID?: null,
      sequence?: null,
      destinationChainID?: null,
      message?: null
    ): pullMessageReceivedEventFilter;

    "pushMessageReceived(uint16,uint8,uint64,uint16,string)"(
      sourceChainID?: null,
      payloadID?: null,
      sequence?: null,
      destinationChainID?: null,
      message?: null
    ): pushMessageReceivedEventFilter;
    pushMessageReceived(
      sourceChainID?: null,
      payloadID?: null,
      sequence?: null,
      destinationChainID?: null,
      message?: null
    ): pushMessageReceivedEventFilter;
  };

  estimateGas: {
    QT_ETH_CALL(overrides?: CallOverrides): Promise<BigNumber>;

    QT_ETH_CALL_BY_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    QT_ETH_CALL_WITH_FINALITY(overrides?: CallOverrides): Promise<BigNumber>;

    QT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    decodeMessage(
      encodedMessage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeMessage(
      parsedMessage: QueryPushPullDemo.MessageStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResponseDigest(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResponseHash(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasReceivedMessage(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasReceivedPushMessage(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasSentMessage(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseAndVerifyQueryResponse(
      wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseEthCallByTimestampQueryResponse(
      pcr: ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseEthCallQueryResponse(
      pcr: ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseEthCallWithFinalityQueryResponse(
      pcr: ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receivePullMessages(
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      messages: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receivePushMessage(
      encodedMessage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    responsePrefix(overrides?: CallOverrides): Promise<BigNumber>;

    sendPullMessage(
      _destinationChainID: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendPushMessage(
      _destinationChainID: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sequence(overrides?: CallOverrides): Promise<BigNumber>;

    updateRegistration(
      _chainID: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyQueryResponseSignatures(
      _wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    QT_ETH_CALL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    QT_ETH_CALL_BY_TIMESTAMP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    QT_ETH_CALL_WITH_FINALITY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    QT_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodeMessage(
      encodedMessage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeMessage(
      parsedMessage: QueryPushPullDemo.MessageStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getResponseDigest(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getResponseHash(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasReceivedMessage(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasReceivedPushMessage(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasSentMessage(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseAndVerifyQueryResponse(
      wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseEthCallByTimestampQueryResponse(
      pcr: ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseEthCallQueryResponse(
      pcr: ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseEthCallWithFinalityQueryResponse(
      pcr: ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receivePullMessages(
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      messages: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receivePushMessage(
      encodedMessage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    responsePrefix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendPullMessage(
      _destinationChainID: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendPushMessage(
      _destinationChainID: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sequence(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateRegistration(
      _chainID: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyQueryResponseSignatures(
      _wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
