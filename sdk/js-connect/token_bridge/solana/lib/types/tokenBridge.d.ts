import { ChainId, Network, TokenBridge, ChainAddress, TokenId, RpcConnection, NativeAddress, ChainsConfig, Contracts } from '@wormhole-foundation/connect-sdk';
import { SolanaUnsignedTransaction, AnySolanaAddress, SolanaChainName } from '@wormhole-foundation/connect-sdk-solana';
import { Connection } from '@solana/web3.js';
import { Program } from '@project-serum/anchor';
import { TokenBridge as TokenBridgeContract } from './types';
export declare class SolanaTokenBridge implements TokenBridge<'Solana'> {
    readonly network: Network;
    readonly chain: SolanaChainName;
    readonly connection: Connection;
    readonly contracts: Contracts;
    readonly chainId: ChainId;
    readonly tokenBridgeAddress: string;
    readonly coreAddress: string;
    readonly tokenBridge: Program<TokenBridgeContract>;
    private constructor();
    static fromProvider(connection: RpcConnection<'Solana'>, config: ChainsConfig): Promise<SolanaTokenBridge>;
    isWrappedAsset(token: AnySolanaAddress): Promise<boolean>;
    getOriginalAsset(token: AnySolanaAddress): Promise<TokenId>;
    hasWrappedAsset(token: TokenId): Promise<boolean>;
    getWrappedAsset(token: TokenId): Promise<NativeAddress<'Solana'>>;
    isTransferCompleted(vaa: TokenBridge.VAA<'Transfer' | 'TransferWithPayload'>): Promise<boolean>;
    getWrappedNative(): Promise<NativeAddress<'Solana'>>;
    createAttestation(token: AnySolanaAddress, payer?: AnySolanaAddress): AsyncGenerator<SolanaUnsignedTransaction>;
    submitAttestation(vaa: TokenBridge.VAA<'AttestMeta'>, payer?: AnySolanaAddress): AsyncGenerator<SolanaUnsignedTransaction>;
    private transferSol;
    transfer(sender: AnySolanaAddress, recipient: ChainAddress, token: AnySolanaAddress | 'native', amount: bigint, payload?: Uint8Array): AsyncGenerator<SolanaUnsignedTransaction>;
    redeem(sender: AnySolanaAddress, vaa: TokenBridge.VAA<'Transfer' | 'TransferWithPayload'>, unwrapNative?: boolean): AsyncGenerator<SolanaUnsignedTransaction>;
    private postVaa;
    private createUnsignedTx;
}
